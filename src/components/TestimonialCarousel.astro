---
import testimonials from '../../public/testimonials.json'
import '@astrojs/tailwind/base.css'
import '../assets/scss/globals.scss'
import { Icon } from 'astro-icon/components'
---

<style lang="scss" is:global>
  // theme settings
  :root {
    --radius-small: 3px;
    --radius-large: 6px;
    --gap-default: 2rem;
    --font-measure: 70ch;
    --font-family-default: 'Open Sans', sans-serif;
    --font-family-special: 'Open Sans', sans-serif;
    // light theme
    --font-color: var(--neutral-900);
    --action-color: var(--primary-300);
    --action-color-state: var(--primary-500);
    --background: var(--neutral-100);
    --primary-background: var(--primary-100);
    --neutral-background: var(--neutral-200);
  }

  // dark color scheme overrides
  .dark-mode {
    --font-color: var(--neutral-100);
    --action-color: var(--secondary-100);
    --action-color-state: var(--secondary-500);
    --background: var(--dark-100);
    --primary-background: var(--primary-500);
    --neutral-background: var(--neutral-900);
  }

  .carousel {
    position: relative;
    overflow: hidden;
    width: 100%;
    margin: auto;
    align-items: center;
  }

  .carousel-track {
    display: flex;
    transition: transform 0.5s ease-in-out;
    will-change: transform;
  }

  .carousel-slide {
    display: grid;
    align-items: center;
    min-width: 80%;
    box-sizing: border-box;
    padding: 1rem 6rem;
    color: var(--font-color);
    text-align: center;
    flex: 0 0 100%;
    gap: 0.5rem;
  }

  .carousel-button {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    border: none;
    color: var(--font-color);
    padding: 0.5rem;
    cursor: pointer;
    z-index: 10;
    font-size: 1.5rem;
  }

  .carousel-button.prev {
    left: 10px;
  }

  .carousel-button.next {
    right: 10px;
  }

  .stars {
    display: flex;
    justify-content: center;
    margin-top: 0.5rem;
  }

  .star {
    font-size: 1.5rem;
    color: var(--action-color);
    margin: 0 0.1rem;
  }

  @media (max-width: 768px) {
    .carousel-slide {
      font-size: 0.9rem;
      padding: 1rem;
      gap: 0.25rem;
    }
  }

  /* Dark Mode Styles */
  .dark-mode .carousel-slide {
    background: var(--background);
    color: var(--font-color);
  }

  .dark-mode .carousel-button {
    background: var(--background);
    color: var(--font-color);
  }

  .dark-mode .star {
    color: var(--action-color-state);
  }
</style>

<!-- Json file lives on the cloud host only and is updated via an api call -->
<div class="carousel" aria-roledescription="carousel">
  <div class="carousel-track" id="carousel-track">
    {testimonials.map((testimonial, index) => (
      <div class="carousel-slide" role="group" aria-roledescription="slide" aria-label={`Slide ${index + 1} of ${testimonials.length}`} key={index}>
        <strong>{testimonial.title}</strong>
        <p>{testimonial.testimonial}</p>
        <p>- {testimonial.name}</p>
        <div class="stars">
          {Array.from({ length: 5 }, (_, i) => (
            <Icon
              key={i}
              name={i < testimonial.rating ? 'ion:star' : 'ion:star-outline'}
              class="star"
            />
          ))}
        </div>
      </div>
    ))}
  </div>
  <button class="carousel-button prev" id="prevButton" aria-label="Previous slide">&#10094;</button>
  <button class="carousel-button next" id="nextButton" aria-label="Next slide">&#10095;</button>
</div>

<script is:inline>
  (function() {
    let track = document.getElementById('carousel-track');
    let slides = Array.from(track.children);
    let nextButton = document.getElementById('nextButton');
    let prevButton = document.getElementById('prevButton');
  
    let currentIndex = 0;
  
    const moveToSlide = (index) => {
      let amountToMove = -index * track.clientWidth;
      track.style.transform = `translateX(${amountToMove}px)`;
    };
  
    const autoScroll = () => {
      currentIndex = (currentIndex + 1) % slides.length;
      moveToSlide(currentIndex);
    };
  
    const nextButtonClickHandler = () => {
      currentIndex = (currentIndex + 1) % slides.length;
      moveToSlide(currentIndex);
    };
  
    const prevButtonClickHandler = () => {
      currentIndex = (currentIndex - 1 + slides.length) % slides.length;
      moveToSlide(currentIndex);
    };
  
    nextButton.addEventListener('click', nextButtonClickHandler);
    prevButton.addEventListener('click', prevButtonClickHandler);
  
    let autoScrollInterval = setInterval(autoScroll, 5000);
  
    track.addEventListener('mouseenter', () => {
      clearInterval(autoScrollInterval);
    });
  
    track.addEventListener('mouseleave', () => {
      autoScrollInterval = setInterval(autoScroll, 5000);
    });
  
    window.addEventListener('resize', () => {
      moveToSlide(currentIndex);
    });

    // Cleanup function to remove event listeners
    window.addEventListener('beforeunload', () => {
      nextButton.removeEventListener('click', nextButtonClickHandler);
      prevButton.removeEventListener('click', prevButtonClickHandler);
      clearInterval(autoScrollInterval);
    });
  })();
</script>